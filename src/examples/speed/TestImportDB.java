package examples.speed;

import datalist.types.SortedIntSet;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Collections;
import java.util.Date;
import java.util.List;

public class TestImportDB
{
  private final static int READ_BLOCK_SIZE = 200;
  private final static int INSERT_CHUNK_SIZE = 200;

  public static void main(String[] args) throws ClassNotFoundException, SQLException, IOException
  {
    String connStr;
    boolean useHSQLDB = args.length > 0 && "hsqldb".equalsIgnoreCase(args[0]);
    if (useHSQLDB)
    {
      new File("sqldb.lck").delete();
      new File("sqldb.log").delete();
      new File("sqldb.properties").delete();
      new File("sqldb.script").delete();
      Class.forName("org.hsqldb.jdbc.JDBCDriver");
      connStr = "jdbc:hsqldb:" + new File("sqldb").getAbsoluteFile();
    }
    else
    {
      new File("h2db.mv.db").delete();
      new File("h2db.trace.db").delete();
      Class.forName("org.h2.Driver");
      connStr = "jdbc:h2:" + new File("h2db").getAbsoluteFile();
    }
    System.out.println(connStr);
    try (Connection conn = DriverManager.getConnection(connStr))
    {
      conn.setAutoCommit(true);
      doCheck(conn, "VARCHAR(500)"); //hsqldb fails for "text", h2 works slower
    }
  }

  private static void doCheck(Connection conn, String textRepl) throws SQLException, FileNotFoundException, IOException
  {
    Statement statement = conn.createStatement();
    String sqlText = "create table master(c1 text, c2 text, c3 text, uid bigint, c4 bigint, c5 date, c6 text,"
        + "c7 text, c8 text, c9 text, c10 text, c11 text, c12 text);";
    if (textRepl != null)
      sqlText = sqlText.replace("text", textRepl);
    statement.executeUpdate(sqlText);
    sqlText = "create table details(uid int GENERATED BY DEFAULT AS IDENTITY, key bigint, d1 text, d2 date, d3 text, d4 text,"
        + " d5 text, d6 text, d7 bigint, d8 text, d9 text, d10 text, d11 float, d12 float, d13 text, PRIMARY KEY(uid));";
    if (textRepl != null)
      sqlText = sqlText.replace("text", textRepl);
    statement.executeUpdate(sqlText);

    long preTime = System.currentTimeMillis();
    try (CsvImport importerM = new CsvImport(new File("ExcelReconvertor/master.csv").getAbsoluteFile());
         PreparedStatement prep = conn.prepareStatement("insert into master(c1, c2, c3, uid, c4, c5, c6, c7, c8, c9, c10, c11, c12) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"))
    {
      doImport(importerM, Integer.MAX_VALUE, prep);
    }
    System.out.println("Master import: " + (System.currentTimeMillis() - preTime) + " ms");
    System.out.flush();

    try (CsvImport importerD = new CsvImport(new File("ExcelReconvertor/details.csv").getAbsoluteFile());
         PreparedStatement prep = conn.prepareStatement("insert into details(key, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"))
    {
      preTime = System.currentTimeMillis();
      doImport(importerD, 2000000, prep);
      System.out.println("Details import: " + (System.currentTimeMillis() - preTime) + " ms");
      System.out.flush();

      preTime = System.currentTimeMillis();
      statement.executeUpdate("create index tnvd_index on details(d7);create index since_index on master(c5);create index uid_iniq on master(uid);");
      System.out.println("Build indexes: " + (System.currentTimeMillis() - preTime) + " ms");
      System.out.flush();

      preTime = System.currentTimeMillis();
      int imported = doImport(importerD, Integer.MAX_VALUE, prep);
      System.out.println("Append next " + imported + ": " + (System.currentTimeMillis() - preTime) + " ms");
      System.out.flush();
    }

    System.out.println(System.lineSeparator() + "Find once and keep opened ResultSet:");
    findAndScroll(conn);

    System.out.println(System.lineSeparator() + "Enum indexes and get by " + READ_BLOCK_SIZE + ":");
    findAndNavigateSeparately(statement, conn);
  }

  private static void findAndScroll(Connection conn) throws IllegalStateException, SQLException
  {
    long preTime = System.currentTimeMillis();
    Statement statement = conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    String sqlText = "select * from master, details where master.uid = details.key and c5 > '1990-01-01' and (d7<3100000000 or d7 > 3199999999)";
    ResultSet idxRS = statement.executeQuery(sqlText);
    System.out.println("Find data: " + (System.currentTimeMillis() - preTime) + " ms");
    System.out.flush();
    preTime = System.currentTimeMillis();
    while (idxRS.next())
      if ("unexpected value".equals(idxRS.getString(1)))
        throw new IllegalStateException("Never happends");
    System.out.println("Scroll forward: " + (System.currentTimeMillis() - preTime) + " ms");
  }

  private static void findAndNavigateSeparately(Statement statement, Connection conn) throws SQLException, IllegalStateException
  {
    long preTime = System.currentTimeMillis();
    ResultSet idxRS = statement.executeQuery("select details.uid from master, details where master.uid = details.key and c5 >= '1990-01-01' and (d7<3100000000 or d7 > 3199999999)");
    SortedIntSet idxs = new SortedIntSet(1000000);
    while (idxRS.next())
      idxs.add(idxRS.getInt(1));
    System.out.println("Find data: " + (System.currentTimeMillis() - preTime) + " ms");
    System.out.println(String.valueOf(idxs.size()) + " items found");
    System.out.flush();
    preTime = System.currentTimeMillis();
    PreparedStatement prep = conn.prepareStatement("select * from details where uid in (" +
        String.join(", ", Collections.nCopies(READ_BLOCK_SIZE, "?")) + ")");
    int pos = 0;
    while (pos < idxs.size())
    {
      for (int i = 0; i < READ_BLOCK_SIZE; ++i)
        prep.setInt(i+1, pos + i < idxs.size()? idxs.get(pos + i) : -1);
      ResultSet rs = prep.executeQuery();
      while (rs.next())
        if ("unexpected value".equals(rs.getString(1)))
          throw new IllegalStateException("Never happends");
      pos += READ_BLOCK_SIZE;
    }
    System.out.println("Fetch by " + READ_BLOCK_SIZE + ": " + (System.currentTimeMillis() - preTime) + " ms");
  }

  private static int doImport(CsvImport importer, int limit, PreparedStatement prep) throws IllegalStateException, SQLException, IOException, FileNotFoundException
  {
    int countAtBatch = 0;
    int updatedCount = 0;
    while (--limit >= 0)
    {
      List<Comparable> line = importer.readLine();
      if (line == null)
        return updatedCount;
      for (int i = 0; i < line.size(); ++i)
      {
        Comparable item = line.get(i);
        if (item == null)
          prep.setNull(i+1, 0);
        else if (item instanceof String)
          prep.setString(i+1, (String)item);
        else if (item instanceof Long)
          prep.setLong(i+1, (Long)item);
        else if (item instanceof Integer)
          prep.setInt(i+1, (Integer)item);
        else if (item instanceof Double)
          prep.setDouble(i+1, (Double)item);
        else if (item instanceof Date)
          prep.setDate(i+1, new java.sql.Date(((Date)item).getTime()));
        else
          throw new IllegalStateException("Type: " + item.getClass().getName());
      }
      prep.addBatch();
      if (++countAtBatch >= INSERT_CHUNK_SIZE)
      {
        prep.executeBatch();
        countAtBatch = 0;
      }
      ++updatedCount;
    }
    if (countAtBatch > 0)
      prep.executeBatch();
    return updatedCount;
  }
}
